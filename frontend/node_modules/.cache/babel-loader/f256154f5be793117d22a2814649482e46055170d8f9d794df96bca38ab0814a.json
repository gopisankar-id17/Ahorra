{"ast":null,"code":"var _jsxFileName = \"D:\\\\ALL projects\\\\Ahorra\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      return {\n        ...state,\n        isLoading: true\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        user: null,\n        token: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n        isLoading: false\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    // Check for stored token on app start\n    const token = localStorage.getItem('token');\n    const userStr = localStorage.getItem('user');\n    if (token && userStr) {\n      try {\n        const user = JSON.parse(userStr);\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user,\n            token\n          }\n        });\n      } catch (error) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    } else {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  }, []);\n  const login = async (email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      // TODO: Replace with actual API call\n      // Simulated login for now\n      const mockUser = {\n        id: '1',\n        email,\n        name: 'Demo User',\n        createdAt: new Date()\n      };\n      const mockToken = 'mock-jwt-token';\n      localStorage.setItem('token', mockToken);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: mockUser,\n          token: mockToken\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE'\n      });\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    dispatch({\n      type: 'LOGIN_START'\n    });\n    try {\n      // TODO: Replace with actual API call\n      // Simulated registration for now\n      const mockUser = {\n        id: '1',\n        email,\n        name,\n        createdAt: new Date()\n      };\n      const mockToken = 'mock-jwt-token';\n      localStorage.setItem('token', mockToken);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: mockUser,\n          token: mockToken\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: 'LOGIN_FAILURE'\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","authReducer","state","action","type","isLoading","isAuthenticated","user","payload","token","initialState","AuthProvider","children","_s","dispatch","localStorage","getItem","userStr","JSON","parse","error","removeItem","login","email","password","mockUser","id","name","createdAt","Date","mockToken","setItem","stringify","register","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/ALL projects/Ahorra/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { User, AuthState } from '../types';\r\n\r\ninterface AuthContextType extends AuthState {\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ntype AuthAction =\r\n  | { type: 'LOGIN_START' }\r\n  | { type: 'LOGIN_SUCCESS'; payload: { user: User; token: string } }\r\n  | { type: 'LOGIN_FAILURE' }\r\n  | { type: 'LOGOUT' }\r\n  | { type: 'SET_LOADING'; payload: boolean };\r\n\r\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\r\n  switch (action.type) {\r\n    case 'LOGIN_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isAuthenticated: true,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n      };\r\n    case 'LOGIN_FAILURE':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: null,\r\n        token: null,\r\n        isLoading: false,\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  isLoading: true,\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // Check for stored token on app start\r\n    const token = localStorage.getItem('token');\r\n    const userStr = localStorage.getItem('user');\r\n    \r\n    if (token && userStr) {\r\n      try {\r\n        const user = JSON.parse(userStr);\r\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { user, token } });\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }\r\n    } else {\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<void> => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      // TODO: Replace with actual API call\r\n      // Simulated login for now\r\n      const mockUser: User = {\r\n        id: '1',\r\n        email,\r\n        name: 'Demo User',\r\n        createdAt: new Date(),\r\n      };\r\n      const mockToken = 'mock-jwt-token';\r\n      \r\n      localStorage.setItem('token', mockToken);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n      \r\n      dispatch({\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: { user: mockUser, token: mockToken },\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: 'LOGIN_FAILURE' });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (name: string, email: string, password: string): Promise<void> => {\r\n    dispatch({ type: 'LOGIN_START' });\r\n    \r\n    try {\r\n      // TODO: Replace with actual API call\r\n      // Simulated registration for now\r\n      const mockUser: User = {\r\n        id: '1',\r\n        email,\r\n        name,\r\n        createdAt: new Date(),\r\n      };\r\n      const mockToken = 'mock-jwt-token';\r\n      \r\n      localStorage.setItem('token', mockToken);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n      \r\n      dispatch({\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: { user: mockUser, token: mockToken },\r\n      });\r\n    } catch (error) {\r\n      dispatch({ type: 'LOGIN_FAILURE' });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = (): void => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    dispatch({ type: 'LOGOUT' });\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}